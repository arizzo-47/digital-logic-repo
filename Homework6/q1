# Anthony Rizzo
# Homework 6
# Digital Logic and Design
# March 2020


	.data ## Data declaration section
	
## String to prompt user:
prompt_string1:	.asciiz "\nEnter string 1: \n"
prompt_string2:	.asciiz "\nEnter string 2: \n"

greater_string: .asciiz "s1 > s2\n"
less_string: .asciiz "s1 < s2\n"
equal_string: .asciiz "The strings are equal\n"

## String 1
s1: .space 100
	la	$t1, s1	# get array address

## String 2
s2: .space 100
	la	$t2, s2	# get array address

## Index variable
index: .word

	.text 	## Assembly language intructions go in text segment
main:		## Start of code section
	
	# Prompt for first string
	li 	$v0, 4			# System call code for printing string = 4
	la 	$a0, prompt_string1	# load address of string to be printed into $a0 	
	syscall 			# call operating system to perform operation specified in $v0
	
	# Read user first string
	li 	$v0, 8			# Read string
	la	$a0, s1			# Address of input buffer: t1
	la	$a1, 100		# Maximum num chars: 100
	syscall	
	
	# Prompt for second string
	li	$v0, 4			
	la	$a0, prompt_string2	# Address of null terminated string to print
	syscall
	
	# Read user second string
	li 	$v0, 8			# Read string
	la	$a0, s2			# Address of input buffer: t2
	la	$a1, 100		# Maximum num chars: 100
	syscall	
	
	# Save newline into register
	li	$t7, '\n'
	
	# Loop and compare
	Loop:
		# Check s1 for null character
		lb $t4, s1($t3)
		beq $t4, $t7, exit
		
		# Check s2 for null character
		lb $t5, s2($t3)
		beq $t5, $t7, exit
		
		# If not null, compare
		bgt $t4, $t5, greater
		blt $t4, $t5, less
		beq $t4, $t5, equal
		j	done
	
		greater:
			#print greater
			li 	$v0, 4			
			la 	$a0, greater_string		
			syscall 
			j 	done
			
			
		less:
			#print less
			li 	$v0, 4			
			la 	$a0, less_string		
			syscall 
			j 	done
				
		equal:
			li 	$v0, 4			
			la 	$a0, equal_string		
			syscall 
			j 	done
		
			
		done:
		# Increment index
		addi $t3, $t3, 1
	
		j Loop
	
	exit:
	

	li $v0, 10			# terminate program
	syscall
